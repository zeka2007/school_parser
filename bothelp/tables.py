def int_r(num):
    num = int(num + (0.5 if num > 0 else -0.5))
    return num


def quarter_marks_analytics(lessons: list,
                            marks: list,
                            old_marks: list = None
                            ):
    result = '–ü—Ä–µ–¥–º–µ—Ç / –æ—Ç–º–µ—Ç–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é\n\n'
    if old_marks is not None:
        result = '–ü—Ä–µ–¥–º–µ—Ç / –æ—Ç–º–µ—Ç–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—É—é —á–µ—Ç–≤–µ—Ä—Ç—å / –æ—Ç–º–µ—Ç–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é\n\n'
    for i in range(len(lessons)):
        if old_marks is not None:
            percent = ''
            if marks[i] != '–∑.' and old_marks[i] != '–∑.' and marks[i] != '–ù–µ—Ç' and old_marks[i] != '–ù–µ—Ç':
                if old_marks[i] > marks[i]:
                    number = (int(old_marks[i]) - int(marks[i])) / int(old_marks[i]) * 100
                    percent = f'(- {round(number, 1)} %)'
                else:
                    number = (int(marks[i]) - int(old_marks[i])) / int(marks[i]) * 100
                    percent = f'(+ {round(number, 1)} %)'

            row = f'{lessons[i]} / {old_marks[i]} / {marks[i]} {percent}\n'
        else:
            row = f'{lessons[i]} / {marks[i]}\n'

        result = result + row

    average_mark = 0
    count = 0
    for mark in marks:
        if mark != '–∑.' and mark != '–ù–µ—Ç':
            average_mark = average_mark + int(mark)
            count = count + 1
    if count != 0:
        average_mark = average_mark / count

    average_mark_old = 0
    if old_marks is not None:
        count = 0
        for mark in old_marks:
            if mark != '–∑.' and mark != '–ù–µ—Ç':
                average_mark_old = average_mark_old + int(mark)
                count = count + 1
        if count != 0:
            average_mark_old = average_mark_old / count

    if average_mark_old != 0 and average_mark != 0:
        if average_mark > average_mark_old:
            result = f'{result}\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —ç—Ç–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark, 2)}, ' \
                     f'—á—Ç–æ –Ω–∞ {round(((average_mark - average_mark_old) / average_mark * 100), 1)}% –ª—É—á—à–µ, ' \
                     f'—á–µ–º –≤ –ø—Ä–æ—à–ª–æ–π. ' \
                     f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ –ø—Ä–æ—à–ª–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark_old, 2)}'
        if average_mark_old > average_mark:
            result = f'{result}\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —ç—Ç–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark, 2)}, ' \
                     f'—á—Ç–æ –Ω–∞ {round(((average_mark_old - average_mark) / average_mark_old * 100), 1)}% —Ö—É–∂–µ, ' \
                     f'—á–µ–º –≤ –ø—Ä–æ—à–ª–æ–π. ' \
                     f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ –ø—Ä–æ—à–ª–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark_old, 2)}'
        if average_mark_old == average_mark:
            result = f'{result}\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —ç—Ç–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark, 2)}, ' \
                     '—á—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–æ—à–ª–æ–π.'
    else:
        if average_mark != 0:
            result = f'{result}\n\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤ —ç—Ç–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏: {round(average_mark, 2)}'

    return result


def quarter_marks_analytics_all(lessons: list,
                                marks: dict):
    result = '–ü—Ä–µ–¥–º–µ—Ç / 1 / 2 / 3 / 4 —á–µ—Ç–≤–µ—Ä—Ç–∏\n\n'
    print(marks)
    for i in range(len(lessons)):
        line = f'{lessons[i]} / {marks[1][i]} / {marks[2][i]} / {marks[3][i]} / {marks[4][i]}\n'
        result = result + line
    return result


def lessons_marks_table(marks: list, lesson: str = None):
    all_marks = ''
    for mark in marks:
        all_marks = all_marks + str(mark) + ' '
    if all_marks == '':
        text = f'–û—Ç–º–µ—Ç–æ–∫ –Ω–µ—Ç'
        return text

    middle_mark = 0
    for mark in marks:
        middle_mark = middle_mark + mark

    middle_mark = middle_mark / len(marks)

    text = f'–ü—Ä–µ–¥–º–µ—Ç: {lesson}\n' \
           f'–û—Ç–º–µ—Ç–∫–∏: {all_marks}\n' \
           f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(middle_mark, 2)}\n'

    if lesson is None:
        text = f'–û—Ç–º–µ—Ç–∫–∏: {all_marks}\n' \
               f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(middle_mark, 2)}\n'

    test_mark = 1
    new_middle_mark = 0
    while True:
        if test_mark > 10:
            break
        for mark in marks:
            new_middle_mark = new_middle_mark + mark
        new_middle_mark = (new_middle_mark + test_mark) / (len(marks) + 1)
        if int_r(new_middle_mark) > int_r(middle_mark):
            break
        test_mark = test_mark + 1
        new_middle_mark = 0

    if int_r(new_middle_mark) > int_r(middle_mark):
        if test_mark == 10:
            text = text + f'–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ª—É—á–∏–≤ {test_mark} –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å {int_r(new_middle_mark)} –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å'
        else:
            text = text + f'–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ª—É—á–∏–≤ {test_mark} –∏–ª–∏ –≤—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å {int_r(new_middle_mark)} –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å'

    return text


def lessons_marks_fix_table(marks: list, lesson: str):
    all_marks = ''
    for mark in marks:
        all_marks = all_marks + str(mark) + ' '
    if all_marks == '':
        text = f'–û—Ç–º–µ—Ç–æ–∫ –Ω–µ—Ç'
        return text

    middle_mark = 0
    for mark in marks:
        middle_mark = middle_mark + mark

    middle_mark = middle_mark / len(marks)

    text = f'–ü—Ä–µ–¥–º–µ—Ç: {lesson}\n' \
           f'–û—Ç–º–µ—Ç–∫–∏: {all_marks}\n' \
           f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(middle_mark, 2)}\n\n'

    new_middle_mark = 0
    mark_counter = {}
    for key in range(1, 11):
        mark_counter[key] = 0

    counter = 0

    for test_mark in range(1, 11):
        for i in range(1, 8):
            for mark in marks:
                new_middle_mark = new_middle_mark + mark
            new_middle_mark = new_middle_mark + i * test_mark
            new_middle_mark = new_middle_mark / (len(marks) + i)
            mark_counter[test_mark] = mark_counter[test_mark] + 1
            if int_r(new_middle_mark) > int_r(middle_mark):
                counter = counter + 1
            # print(f'(i : {i})({counter}){middle_mark} > {new_middle_mark} ({int_r(new_middle_mark)})')

            new_middle_mark = 0

        if counter == 1:
            mark_counter[test_mark] = 1

        elif counter == 0:
            mark_counter[test_mark] = 0

        else:
            mark_counter[test_mark] = (mark_counter[test_mark] + 1) - counter
        counter = 0

    can_change_count = 0
    for mark in mark_counter:
        if mark_counter[mark] != 0:
            can_change_count = can_change_count + 1

    if can_change_count == 0:
        text = text + '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ—é –æ—Ç–º–µ—Ç–∫—É'
        return text

    text = text + f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ {int_r(middle_mark) + 1}:\n'

    for mark in mark_counter:
        if mark_counter[mark] != 0:
            text = text + f'–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å {mark} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {mark_counter[mark]}\n'
            if mark != 10:
                if mark_counter[mark + 1] != 0:
                    text = text + '–ò–õ–ò\n'

    return text


def lessons_if_get_mark_table(marks: list, lesson: str):
    all_marks = ''
    for mark in marks:
        all_marks = all_marks + str(mark) + ' '
    if all_marks == '':
        text = f'–û—Ç–º–µ—Ç–æ–∫ –Ω–µ—Ç'
        return text

    middle_mark = 0
    for mark in marks:
        middle_mark = middle_mark + mark

    middle_mark = middle_mark / len(marks)

    text = f'–ü—Ä–µ–¥–º–µ—Ç: {lesson}\n' \
           f'–û—Ç–º–µ—Ç–∫–∏: {all_marks}\n' \
           f'–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(middle_mark, 2)}\n\n' \
           f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à' \
           f'–±–∞–ª, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–º–µ—Ç–∫–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n' \
           f'–ü—Ä–∏–º–µ—Ä: 8 10 7\n' \
           f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è!'

    return text


def setting_menu_table(user_id: int,
                       tg_name: str,
                       alarm_status: bool,
                       view_model: int,
                       school_id: int = None,
                       school_name: str = None,
                       in_class: str = None,
                       birthday: str = None,
                       alarm_lessons: str = '–í—Å–µ'):
    text = ''
    model_type = '–ù–µ–ø–æ–ª–Ω–∞—è'
    authorization = '‚úÖ –î–∞'

    if view_model != 0:
        model_type = '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è'

        if not school_name or not in_class or not birthday:
            authorization = '‚ùå –ù–µ—Ç'
            text = text + f'‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n' \
                          f'üÜî Telegram ID: {user_id}\n' \
                          f'üë§ –ò–º—è –≤ Telegram: {tg_name}\n' \
                          f'ü§ñ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {authorization}\n'
        else:
            text = text + f'üÜî Telegram ID: {user_id}\n' \
                          f'üë§ –ò–º—è –≤ Telegram: {tg_name}\n' \
                          f'üë§ –§–ò–û: {school_name}\n' \
                          f'üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä schools.by: {school_id}\n' \
                          f'ü§ñ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {authorization}\n\n' \
                          f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n'

    if view_model == 0:
        text = f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n'

    if alarm_status:
        text = text + f'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n' \
                      f'‚òëÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {alarm_lessons}\n'
    else:
        text = text + f'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã\n'

    text = text + f'üëÅÔ∏è –ú–æ–¥–µ–ª—å –≤–∏–¥–∞: {model_type}'

    return text


def set_alarm_lessons(lessons: list):
    text = '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ' \
           '–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n' \
           '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º\n' \
           '–ü—Ä–∏–º–µ—Ä: 3 5 6\n' \
           '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *\n\n' \
           '–ü—Ä–µ–¥–º–µ—Ç—ã:\n'

    i = 1
    for lesson in lessons:
        item = f'{i}. {lesson}\n'
        text = text + item
        i += 1

    return text
