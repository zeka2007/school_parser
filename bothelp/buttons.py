from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from bothelp import bot_sql

from bothelp import parser

not_login = 'üîë –í–æ–π—Ç–∏'
cancel = '‚ùå –û—Ç–º–µ–Ω–∞'
go_to_settings = '‚¨Ö –í –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫'
alarm_on = 'üõéÔ∏è –í–∫–ª. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
alarm_off = 'üõéÔ∏è –í—ã–∫–ª. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
alarm_settings = 'üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'

main_menu_buttons = [
    'üîé –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ—Ç–æ–∫',
    'üßê –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é',
    'üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
]
analytics_menu_buttons = [
    'üìÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫',
    'üßÆ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
]

fix_menu_buttons = [
    '‚ÅâÔ∏è –°–ø–æ—Å–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏',
    '‚òùÔ∏è –ß—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—å...',
    '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
]

setting_menu_buttons = [
        'üõéÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥',
        '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
    ]

alarm_setting_menu_buttons = [
        '‚òëÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏',
        'üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏',
        '‚¨ÖÔ∏è –í –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    ]


def cancel_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button = KeyboardButton(cancel)
    keyboard.add(button)
    return keyboard


def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in main_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def analytics_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in analytics_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def fix_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in fix_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def setting_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in setting_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def alarm_setting_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in alarm_setting_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def alarm_menu(user_id: int):
    sql = bot_sql.MySQL()
    alarm_menu_buttons = [
        alarm_on,
        alarm_settings,
        go_to_settings
    ]
    if sql.get_alarm_status(user_id):
        alarm_menu_buttons = [
            alarm_off,
            alarm_settings,
            go_to_settings
        ]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for menu_item in alarm_menu_buttons:
        b = KeyboardButton(menu_item)
        keyboard.add(b)
    return keyboard


def quarter_inline_buttons():
    inline_kb = InlineKeyboardMarkup(row_width=4)
    inline_btn1 = InlineKeyboardButton('1',
                                       callback_data='quarter1')
    inline_btn2 = InlineKeyboardButton('2',
                                       callback_data='quarter2')
    inline_btn3 = InlineKeyboardButton('3',
                                       callback_data='quarter3')
    inline_btn4 = InlineKeyboardButton('4',
                                       callback_data='quarter4')
    inline_btn5 = InlineKeyboardButton('–ó–∞ –≤—Å–µ —á–µ—Ç–≤–µ—Ä—Ç–∏',
                                       callback_data='quarter5')
    inline_kb.add(inline_btn1, inline_btn2,
                  inline_btn3, inline_btn4, inline_btn5)

    return inline_kb


def lessons_inline_buttons(user_id: int, tag: str = 'lesson'):
    inline_kb = InlineKeyboardMarkup(row_width=2)
    par = parser.WebUser(user_id)
    lessons = par.get_lessons()
    counter = 0
    for lesson in lessons:
        inline_btn = InlineKeyboardButton(lesson,
                                          callback_data=f'{tag}_{counter}')
        inline_kb.insert(inline_btn)
        counter = counter + 1

    return inline_kb
